#!/bin/bash
#
# getting swarm config
my_dir="$(dirname "$0")"
source "$my_dir/swarm-config"

########################################
# swarm related funcs to exec remotely #
########################################
#
# https://github.com/moby/moby/issues/25432
# Steps 1-3 from https://docs.docker.com/engine/swarm/admin_guide/#recover-from-disaster
# ./swarm-create --force to recreate swarm in steps 4-8
hard_restart() {

	sudo systemctl stop docker


	# make sure to make a backup if you delete something wrong
	sudo cp -ar /var/lib/docker /tmp/docker.bak

	sudo rm -Rf /var/lib/docker
	sudo rm -Rf /run/docker.* #bug 1.2
	
	sudo systemctl start docker
}

# TODO:
# https://github.com/moby/moby/issues/25432#issuecomment-304639288
# https://docs.docker.com/engine/swarm/admin_guide/#back-up-the-swarm
sort_restart() {
	# using systemd
	sudo systemctl stop docker
	
	# make sure to make a backup if you delete something wrong
	sudo cp -ar /var/lib/docker/swarm/ /tmp/swarm.bak
	
	sudo nano /var/lib/docker/swarm/state.json
	# state.json will look something like this:
	# [{"node_id":"nodeidofhealthynode","addr":"123.123.123.123:2377"},
	# {"node_id":"nodeidofunhealthynode","addr":"123.123.123.124:2377"}]
	
	# You want to delete any entries to unhealthy nodes. so just one healthy manager node is left
	# [{"node_id":"nodeidofhealthynode","addr":"123.123.123.123:2377"}]
	# sed .....
	# 
	# lastly restart docker
	sudo systemctl start docker
}
####################################
restart_host(){
	local f_host="$1"
	local f_ip=`$my_dir/bin/getip $f_host`
	if [ -z $f_ip ]; then
		echo "$f_host not found.."
		return 1
	fi
	echo "found $f_host @$f_ip.."
	echo -e "attempting to restart..."

	ssh $USER@$f_ip "$(declare -f hard_restart); hard_restart";
}

restart_all() {
	## now loop through the above array
	for node in "${formation[@]}"; do
		echo "$node.local"
	   # or do whatever with individual element of the array
		restart_host "$node.local"
	done
}

restart_all
