#!/bin/bash

# controls
CONFIG_FILE="./swarm-config"
FORCE=false

usage()
{
  cat << EOF
usage: $0 [options]

Create a local or remote docker swarm as defined in \`swarm-config\`.

OPTIONS:
  --help|-h       Show this message
  --force|-f      Force create new
  --config|-c     path to swarm-config (default="./swarm-config")

EOF
  exit 1
}
# Parse argument
# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --config) args="${args}-c ";;
    --force) args="${args}-f ";;

    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts ":hc:f" opt; do
  case $opt in
    h)  usage ;;
    c)  CONFIG_FILE=$OPTARG ;;
    f)  FORCE=true ;;

    \?) usage ;;
    :)
      echo "option -$OPTARG requires an argument"
      usage
    ;;
  esac
done
shift $((OPTIND -1))


# Getting Swarm Config
my_dir="$(dirname "$0")"
source "$my_dir/swarm-config"

# generate swarm token
# for <v1.2 swarm
new_token() {
	for i in $(seq 1 32); 
		do echo -n $(echo "obase=16; $((`dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -f1 -d" "`))" | bc);
	done;
	echo
}
export SWARM_TOKEN=`new_token`;

########################################
# swarm related funcs to exec remotely #
########################################
swarm_init() {
	docker swarm init
}
swarm_manager_key() {
	docker swarm join-token manager | grep -oE "\bdocker.*\b"
}
swarm_worker_key() {
	docker swarm join-token worker | grep -oE "\bdocker.*\b"
}
# SWARM_JOIN_WARMUP & DOCKER_SWARM_INIT mux
[ "$FORCE" = true ] && SWARM_JOIN_WARMUP="docker swarm leave --force" \
					|| SWARM_JOIN_WARMUP=":"
[ "$FORCE" = true ] && DOCKER_SWARM_INIT="docker swarm init --force-new-cluster" \
					|| DOCKER_SWARM_INIT="docker swarm init"

##################################################
# Swarm Create Start                             #
##################################################
echo "(づ ￣ ³￣)づ creating swarm..."
echo -e "SWARM_TOKEN=$SWARM_TOKEN \n"

###########################
# leader                  #
echo " ( ͡◉ ͜ʖ ͡◉) looking for swarm leader"
LEADER_IP=`$my_dir/bin/getip "${LEADER}"`

if [ -z $LEADER_IP ]; then
	echo "leader $LEADER not found..make sure host is up!"
	exit 1;
fi

echo "found $LEADER @${LEADER_IP}"
echo "(づ ￣ ³￣)づ executing commands on \`${LEADER}\`"
echo -e "you may need to enter host password..\n"
# unless have SSH keys installed for passwordless login

# swarm init
ssh $USER@$LEADER_IP bash -c "'
$SWARM_JOIN_WARMUP
$DOCKER_SWARM_INIT
'"
# retrieve swarm join cmds
MANAGER_JOIN_CMD=`ssh "$USER@$LEADER_IP" "$(declare -f swarm_manager_key); swarm_manager_key"`
WORKER_JOIN_CMD=`ssh "$USER@$LEADER_IP" "$(declare -f swarm_worker_key); swarm_worker_key"`

echo $MANAGER_JOIN_CMD
echo $WORKER_JOIN_CMD

###########################
# followers               #
echo " ( ͡◉ ͜ʖ ͡◉) looking for swarm citizens"

manager() {
	if [ -z "$MANAGER_JOIN_CMD" ]; then
		echo "MANAGER_JOIN_CMD not found"
		return 1
	fi
	for node in "${managers[@]}"; do
		local f_host="$node"
		local f_ip=`$my_dir/bin/getip $f_host`
		if [ -z $f_ip ]; then
			echo "$f_host not found.."
			continue
		fi
		echo "found $f_host @$f_ip.."
		echo -e "attempting to join swarm as manager..."
		ssh $USER@$f_ip bash -c "'
		$SWARM_JOIN_WARMUP
		$MANAGER_JOIN_CMD
		'"
	done;
}

worker() {
	if [ -z "$WORKER_JOIN_CMD" ]; then
		echo "WORKER_JOIN_CMD not found"
		return 1
	fi
	for node in "${workers[@]}"; do
		local f_host="$node"
		local f_ip=`$my_dir/bin/getip $f_host`
		if [ -z $f_ip ]; then
			echo "$f_host not found.."
			continue
		fi
		echo "found $f_host @$f_ip.."
		echo -e "attempting to join swarm as worker..."
		ssh $USER@$f_ip bash -c "'
		$SWARM_JOIN_WARMUP
		$WORKER_JOIN_CMD
		'"
	done;
}

echo "(づ ￣ ³￣)づ joining managers..."
manager

echo "(づ ￣ ³￣)づ joining workers..."
worker
